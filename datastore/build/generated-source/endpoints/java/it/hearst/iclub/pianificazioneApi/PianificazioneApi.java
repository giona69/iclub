/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/google/apis-client-generator/
 * (build: 2017-02-15 17:18:02 UTC)
 * on 2017-03-20 at 12:07:13 UTC 
 * Modify at your own risk.
 */

package it.hearst.iclub.pianificazioneApi;

/**
 * Service definition for PianificazioneApi (v1).
 *
 * <p>
 * This is an API
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link PianificazioneApiRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class PianificazioneApi extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 15,
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.15 of google-api-client to run version " +
        "1.22.0 of the pianificazioneApi library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://myApplicationId.appspot.com/_ah/api/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "pianificazioneApi/v1/";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public PianificazioneApi(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  PianificazioneApi(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * Create a request for the method "deletePianificazione".
   *
   * This request holds the parameters needed by the pianificazioneApi server.  After setting any
   * optional parameters, call the {@link DeletePianificazione#execute()} method to invoke the remote
   * operation.
   *
   * @param id
   * @param content the {@link it.hearst.iclub.pianificazioneApi.model.Pianificazione}
   * @return the request
   */
  public DeletePianificazione deletePianificazione(java.lang.String id, it.hearst.iclub.pianificazioneApi.model.Pianificazione content) throws java.io.IOException {
    DeletePianificazione result = new DeletePianificazione(id, content);
    initialize(result);
    return result;
  }

  public class DeletePianificazione extends PianificazioneApiRequest<it.hearst.iclub.pianificazioneApi.model.Pianificazione> {

    private static final String REST_PATH = "deletePianificazione";

    /**
     * Create a request for the method "deletePianificazione".
     *
     * This request holds the parameters needed by the the pianificazioneApi server.  After setting
     * any optional parameters, call the {@link DeletePianificazione#execute()} method to invoke the
     * remote operation. <p> {@link DeletePianificazione#initialize(com.google.api.client.googleapis.s
     * ervices.AbstractGoogleClientRequest)} must be called to initialize this instance immediately
     * after invoking the constructor. </p>
     *
     * @param id
     * @param content the {@link it.hearst.iclub.pianificazioneApi.model.Pianificazione}
     * @since 1.13
     */
    protected DeletePianificazione(java.lang.String id, it.hearst.iclub.pianificazioneApi.model.Pianificazione content) {
      super(PianificazioneApi.this, "DELETE", REST_PATH, content, it.hearst.iclub.pianificazioneApi.model.Pianificazione.class);
      this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
    }

    @Override
    public DeletePianificazione setAlt(java.lang.String alt) {
      return (DeletePianificazione) super.setAlt(alt);
    }

    @Override
    public DeletePianificazione setFields(java.lang.String fields) {
      return (DeletePianificazione) super.setFields(fields);
    }

    @Override
    public DeletePianificazione setKey(java.lang.String key) {
      return (DeletePianificazione) super.setKey(key);
    }

    @Override
    public DeletePianificazione setOauthToken(java.lang.String oauthToken) {
      return (DeletePianificazione) super.setOauthToken(oauthToken);
    }

    @Override
    public DeletePianificazione setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (DeletePianificazione) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public DeletePianificazione setQuotaUser(java.lang.String quotaUser) {
      return (DeletePianificazione) super.setQuotaUser(quotaUser);
    }

    @Override
    public DeletePianificazione setUserIp(java.lang.String userIp) {
      return (DeletePianificazione) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String id;

    /**

     */
    public java.lang.String getId() {
      return id;
    }

    public DeletePianificazione setId(java.lang.String id) {
      this.id = id;
      return this;
    }

    @Override
    public DeletePianificazione set(String parameterName, Object value) {
      return (DeletePianificazione) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "getPianificazione".
   *
   * This request holds the parameters needed by the pianificazioneApi server.  After setting any
   * optional parameters, call the {@link GetPianificazione#execute()} method to invoke the remote
   * operation.
   *
   * @param id
   * @return the request
   */
  public GetPianificazione getPianificazione(java.lang.String id) throws java.io.IOException {
    GetPianificazione result = new GetPianificazione(id);
    initialize(result);
    return result;
  }

  public class GetPianificazione extends PianificazioneApiRequest<it.hearst.iclub.pianificazioneApi.model.Pianificazione> {

    private static final String REST_PATH = "getPianificazione";

    /**
     * Create a request for the method "getPianificazione".
     *
     * This request holds the parameters needed by the the pianificazioneApi server.  After setting
     * any optional parameters, call the {@link GetPianificazione#execute()} method to invoke the
     * remote operation. <p> {@link GetPianificazione#initialize(com.google.api.client.googleapis.serv
     * ices.AbstractGoogleClientRequest)} must be called to initialize this instance immediately after
     * invoking the constructor. </p>
     *
     * @param id
     * @since 1.13
     */
    protected GetPianificazione(java.lang.String id) {
      super(PianificazioneApi.this, "GET", REST_PATH, null, it.hearst.iclub.pianificazioneApi.model.Pianificazione.class);
      this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public GetPianificazione setAlt(java.lang.String alt) {
      return (GetPianificazione) super.setAlt(alt);
    }

    @Override
    public GetPianificazione setFields(java.lang.String fields) {
      return (GetPianificazione) super.setFields(fields);
    }

    @Override
    public GetPianificazione setKey(java.lang.String key) {
      return (GetPianificazione) super.setKey(key);
    }

    @Override
    public GetPianificazione setOauthToken(java.lang.String oauthToken) {
      return (GetPianificazione) super.setOauthToken(oauthToken);
    }

    @Override
    public GetPianificazione setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (GetPianificazione) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public GetPianificazione setQuotaUser(java.lang.String quotaUser) {
      return (GetPianificazione) super.setQuotaUser(quotaUser);
    }

    @Override
    public GetPianificazione setUserIp(java.lang.String userIp) {
      return (GetPianificazione) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String id;

    /**

     */
    public java.lang.String getId() {
      return id;
    }

    public GetPianificazione setId(java.lang.String id) {
      this.id = id;
      return this;
    }

    @Override
    public GetPianificazione set(String parameterName, Object value) {
      return (GetPianificazione) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "insertPianificazione".
   *
   * This request holds the parameters needed by the pianificazioneApi server.  After setting any
   * optional parameters, call the {@link InsertPianificazione#execute()} method to invoke the remote
   * operation.
   *
   * @param content the {@link it.hearst.iclub.pianificazioneApi.model.Pianificazione}
   * @return the request
   */
  public InsertPianificazione insertPianificazione(it.hearst.iclub.pianificazioneApi.model.Pianificazione content) throws java.io.IOException {
    InsertPianificazione result = new InsertPianificazione(content);
    initialize(result);
    return result;
  }

  public class InsertPianificazione extends PianificazioneApiRequest<it.hearst.iclub.pianificazioneApi.model.Pianificazione> {

    private static final String REST_PATH = "insertPianificazione";

    /**
     * Create a request for the method "insertPianificazione".
     *
     * This request holds the parameters needed by the the pianificazioneApi server.  After setting
     * any optional parameters, call the {@link InsertPianificazione#execute()} method to invoke the
     * remote operation. <p> {@link InsertPianificazione#initialize(com.google.api.client.googleapis.s
     * ervices.AbstractGoogleClientRequest)} must be called to initialize this instance immediately
     * after invoking the constructor. </p>
     *
     * @param content the {@link it.hearst.iclub.pianificazioneApi.model.Pianificazione}
     * @since 1.13
     */
    protected InsertPianificazione(it.hearst.iclub.pianificazioneApi.model.Pianificazione content) {
      super(PianificazioneApi.this, "POST", REST_PATH, content, it.hearst.iclub.pianificazioneApi.model.Pianificazione.class);
    }

    @Override
    public InsertPianificazione setAlt(java.lang.String alt) {
      return (InsertPianificazione) super.setAlt(alt);
    }

    @Override
    public InsertPianificazione setFields(java.lang.String fields) {
      return (InsertPianificazione) super.setFields(fields);
    }

    @Override
    public InsertPianificazione setKey(java.lang.String key) {
      return (InsertPianificazione) super.setKey(key);
    }

    @Override
    public InsertPianificazione setOauthToken(java.lang.String oauthToken) {
      return (InsertPianificazione) super.setOauthToken(oauthToken);
    }

    @Override
    public InsertPianificazione setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (InsertPianificazione) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public InsertPianificazione setQuotaUser(java.lang.String quotaUser) {
      return (InsertPianificazione) super.setQuotaUser(quotaUser);
    }

    @Override
    public InsertPianificazione setUserIp(java.lang.String userIp) {
      return (InsertPianificazione) super.setUserIp(userIp);
    }

    @Override
    public InsertPianificazione set(String parameterName, Object value) {
      return (InsertPianificazione) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "listPianificazione".
   *
   * This request holds the parameters needed by the pianificazioneApi server.  After setting any
   * optional parameters, call the {@link ListPianificazione#execute()} method to invoke the remote
   * operation.
   *
   * @return the request
   */
  public ListPianificazione listPianificazione() throws java.io.IOException {
    ListPianificazione result = new ListPianificazione();
    initialize(result);
    return result;
  }

  public class ListPianificazione extends PianificazioneApiRequest<it.hearst.iclub.pianificazioneApi.model.CollectionResponsePianificazione> {

    private static final String REST_PATH = "listPianificazione";

    /**
     * Create a request for the method "listPianificazione".
     *
     * This request holds the parameters needed by the the pianificazioneApi server.  After setting
     * any optional parameters, call the {@link ListPianificazione#execute()} method to invoke the
     * remote operation. <p> {@link ListPianificazione#initialize(com.google.api.client.googleapis.ser
     * vices.AbstractGoogleClientRequest)} must be called to initialize this instance immediately
     * after invoking the constructor. </p>
     *
     * @since 1.13
     */
    protected ListPianificazione() {
      super(PianificazioneApi.this, "GET", REST_PATH, null, it.hearst.iclub.pianificazioneApi.model.CollectionResponsePianificazione.class);
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public ListPianificazione setAlt(java.lang.String alt) {
      return (ListPianificazione) super.setAlt(alt);
    }

    @Override
    public ListPianificazione setFields(java.lang.String fields) {
      return (ListPianificazione) super.setFields(fields);
    }

    @Override
    public ListPianificazione setKey(java.lang.String key) {
      return (ListPianificazione) super.setKey(key);
    }

    @Override
    public ListPianificazione setOauthToken(java.lang.String oauthToken) {
      return (ListPianificazione) super.setOauthToken(oauthToken);
    }

    @Override
    public ListPianificazione setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (ListPianificazione) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public ListPianificazione setQuotaUser(java.lang.String quotaUser) {
      return (ListPianificazione) super.setQuotaUser(quotaUser);
    }

    @Override
    public ListPianificazione setUserIp(java.lang.String userIp) {
      return (ListPianificazione) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String cursor;

    /**

     */
    public java.lang.String getCursor() {
      return cursor;
    }

    public ListPianificazione setCursor(java.lang.String cursor) {
      this.cursor = cursor;
      return this;
    }

    @Override
    public ListPianificazione set(String parameterName, Object value) {
      return (ListPianificazione) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "searchPianificazione".
   *
   * This request holds the parameters needed by the pianificazioneApi server.  After setting any
   * optional parameters, call the {@link SearchPianificazione#execute()} method to invoke the remote
   * operation.
   *
   * @param search
   * @return the request
   */
  public SearchPianificazione searchPianificazione(java.lang.String search) throws java.io.IOException {
    SearchPianificazione result = new SearchPianificazione(search);
    initialize(result);
    return result;
  }

  public class SearchPianificazione extends PianificazioneApiRequest<it.hearst.iclub.pianificazioneApi.model.CollectionResponsePianificazione> {

    private static final String REST_PATH = "searchPianificazione";

    /**
     * Create a request for the method "searchPianificazione".
     *
     * This request holds the parameters needed by the the pianificazioneApi server.  After setting
     * any optional parameters, call the {@link SearchPianificazione#execute()} method to invoke the
     * remote operation. <p> {@link SearchPianificazione#initialize(com.google.api.client.googleapis.s
     * ervices.AbstractGoogleClientRequest)} must be called to initialize this instance immediately
     * after invoking the constructor. </p>
     *
     * @param search
     * @since 1.13
     */
    protected SearchPianificazione(java.lang.String search) {
      super(PianificazioneApi.this, "GET", REST_PATH, null, it.hearst.iclub.pianificazioneApi.model.CollectionResponsePianificazione.class);
      this.search = com.google.api.client.util.Preconditions.checkNotNull(search, "Required parameter search must be specified.");
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public SearchPianificazione setAlt(java.lang.String alt) {
      return (SearchPianificazione) super.setAlt(alt);
    }

    @Override
    public SearchPianificazione setFields(java.lang.String fields) {
      return (SearchPianificazione) super.setFields(fields);
    }

    @Override
    public SearchPianificazione setKey(java.lang.String key) {
      return (SearchPianificazione) super.setKey(key);
    }

    @Override
    public SearchPianificazione setOauthToken(java.lang.String oauthToken) {
      return (SearchPianificazione) super.setOauthToken(oauthToken);
    }

    @Override
    public SearchPianificazione setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (SearchPianificazione) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public SearchPianificazione setQuotaUser(java.lang.String quotaUser) {
      return (SearchPianificazione) super.setQuotaUser(quotaUser);
    }

    @Override
    public SearchPianificazione setUserIp(java.lang.String userIp) {
      return (SearchPianificazione) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String search;

    /**

     */
    public java.lang.String getSearch() {
      return search;
    }

    public SearchPianificazione setSearch(java.lang.String search) {
      this.search = search;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String cursor;

    /**

     */
    public java.lang.String getCursor() {
      return cursor;
    }

    public SearchPianificazione setCursor(java.lang.String cursor) {
      this.cursor = cursor;
      return this;
    }

    @Override
    public SearchPianificazione set(String parameterName, Object value) {
      return (SearchPianificazione) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "updatePianificazione".
   *
   * This request holds the parameters needed by the pianificazioneApi server.  After setting any
   * optional parameters, call the {@link UpdatePianificazione#execute()} method to invoke the remote
   * operation.
   *
   * @param id
   * @param content the {@link it.hearst.iclub.pianificazioneApi.model.Pianificazione}
   * @return the request
   */
  public UpdatePianificazione updatePianificazione(java.lang.String id, it.hearst.iclub.pianificazioneApi.model.Pianificazione content) throws java.io.IOException {
    UpdatePianificazione result = new UpdatePianificazione(id, content);
    initialize(result);
    return result;
  }

  public class UpdatePianificazione extends PianificazioneApiRequest<it.hearst.iclub.pianificazioneApi.model.Pianificazione> {

    private static final String REST_PATH = "updatePianificazione";

    /**
     * Create a request for the method "updatePianificazione".
     *
     * This request holds the parameters needed by the the pianificazioneApi server.  After setting
     * any optional parameters, call the {@link UpdatePianificazione#execute()} method to invoke the
     * remote operation. <p> {@link UpdatePianificazione#initialize(com.google.api.client.googleapis.s
     * ervices.AbstractGoogleClientRequest)} must be called to initialize this instance immediately
     * after invoking the constructor. </p>
     *
     * @param id
     * @param content the {@link it.hearst.iclub.pianificazioneApi.model.Pianificazione}
     * @since 1.13
     */
    protected UpdatePianificazione(java.lang.String id, it.hearst.iclub.pianificazioneApi.model.Pianificazione content) {
      super(PianificazioneApi.this, "PUT", REST_PATH, content, it.hearst.iclub.pianificazioneApi.model.Pianificazione.class);
      this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
    }

    @Override
    public UpdatePianificazione setAlt(java.lang.String alt) {
      return (UpdatePianificazione) super.setAlt(alt);
    }

    @Override
    public UpdatePianificazione setFields(java.lang.String fields) {
      return (UpdatePianificazione) super.setFields(fields);
    }

    @Override
    public UpdatePianificazione setKey(java.lang.String key) {
      return (UpdatePianificazione) super.setKey(key);
    }

    @Override
    public UpdatePianificazione setOauthToken(java.lang.String oauthToken) {
      return (UpdatePianificazione) super.setOauthToken(oauthToken);
    }

    @Override
    public UpdatePianificazione setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (UpdatePianificazione) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public UpdatePianificazione setQuotaUser(java.lang.String quotaUser) {
      return (UpdatePianificazione) super.setQuotaUser(quotaUser);
    }

    @Override
    public UpdatePianificazione setUserIp(java.lang.String userIp) {
      return (UpdatePianificazione) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String id;

    /**

     */
    public java.lang.String getId() {
      return id;
    }

    public UpdatePianificazione setId(java.lang.String id) {
      this.id = id;
      return this;
    }

    @Override
    public UpdatePianificazione set(String parameterName, Object value) {
      return (UpdatePianificazione) super.set(parameterName, value);
    }
  }

  /**
   * Builder for {@link PianificazioneApi}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          DEFAULT_ROOT_URL,
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
    }

    /** Builds a new instance of {@link PianificazioneApi}. */
    @Override
    public PianificazioneApi build() {
      return new PianificazioneApi(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link PianificazioneApiRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setPianificazioneApiRequestInitializer(
        PianificazioneApiRequestInitializer pianificazioneapiRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(pianificazioneapiRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }
  }
}
